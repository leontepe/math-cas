MATH-CAS:

AGENDA:
- [Diese Woche] Support f�r:
	[x] 1. Grundlagen (Grundrechenarten, Präzedenz)
	[x] 2. Klammern
	[x] 3. unaere Operatoren (-, +)
	[x] 4. Kommazahlen
	[x] 5. Variablen
	[x] 6. Vordefinierte Funktionen (zB. trig.: sin, cos)
	[x] 7. Vordefinierte Konstanten (z.B. pi, e)
	[x] 9. Fakultät

	Zusammen:
	[.] 10. Implizite Multiplikation (über math. Kontext)
	[.] 11. eigendefinierte Funktionen (f(x) = ...)
	[.] 12. Rückmeldung über Syntaxfehler (d.h. Exceptions einbauen)

	[ ] 13. Griechische Buchstaben/Variablen

- Funktionen/Analysis:
	- 2D-Graph
	- Nullstellen berechnen
	- Ableitung bilden (+ Ableitungsregeln)
	- Stammfunktion bilden
	- Extremstellen ausrechnen
	- Wendestellen ausrechnen
	- Notwendige / hinreichende Kriterien
	- Integrale ausrechnen

- Vektorrechnung/-geometrie
	- Rechenarten
	- Ebenen
	- Parameterdarstellung

DESIGN DECISIONS:
- When expression is ambiguous, force user to place parentheses instead of defaulting to one option.
	Example: a/b!
			= (a/b)!
			OR a/(b!)
			BUT I would say it should be a/(b!) because ! has higher precedence than /

- as per convention, variables should be italicized

- since the formatted output will need to be different than the raw string anyway, use a set of internal tokens to get rid of ambiguity
	(but this does not solve the problem as to whether f(x) is a multiplication or a function definition)

- assumption: algebra is always about equations


KOMPLETTE PRODUKT IDEE:
Im Gegensatz zu den meisten anderen CA-Systemen eine besonders inuitive und realitätsnahe Notation,
um leicht algebraische Umformungen durchzuführen und nachvollziehen zu können. Während der Hauptfokus
von vielen anderen Mathe-Lernsoftwares die Graphischen Teile der Mathematik sind, ist die von diesem
Produkt die Algebra. Man soll so mehr oder weniger "spielerisch" die algebraischen Optionen der Umformung
ausprobieren können, ohne das lange Schreiben und die lästigen Schreibfehler o.ä., die ggf. beim Lernen 
stören. So werden die Blockaden bei diesem schwierigen Teil der Mathematik so gering wie möglich gemacht,
um das Mathe-Lernen so einfach wie möglich zu machen.

Außerdem sollte man die Möglichkeit haben, sich den richtigen Lösungsweg mit richtiger Notation einer Aufgabe
anzeigen zu lassen.

Logische Gruppen farbig markieren beim Hovern

Umformungen:
- Ausmultiplizieren (Produkt von Klammerausdruck und Zahl, Produkt von mehreren Klammerausdrücken)
- Ausklammern
- nahrhafte Ergänzung (plus irgendwas minus irgendwas)
- Rechenoperation auf beiden Seiten einer Gleichung



MATHE DIGITALISIEREN (BILDUNG)

--PROBLEM FUNKTIONEN--

Die gesamte Infrastruktur soll so generell wie möglich sein, damit ich eine gute Grundlage habe, auf der ich dann das Projekt ohne alles umzustrukturieren
erweitern kann. Aber andererseits muss ich mich darauf fokussieren, auch vorwärts zu kommen. Ich bin im Moment dabei darüber nachzudenken, wie ich die
Funktionen einbauen werde und bin dabei auf ein Interpretationsproblem eines Ausdrucks gekommen. Wenn man in irgendeinem Ausdruck nun f(x) stehen hat, woher
weiß ich, dass damit die Funktion f(x) gemeint ist und nicht eine implizite Multiplikation zwischen den Variablen f und x? So wie ich das momentan sehe,
kann man das theoretisch nicht genau sagen. f(x) = 5x^2-5 könnte auch als ganz normale Gleichung angesehen werden, bei der f(x) bzw. f mal x auf der linken
Seite steht. Wenn eine interne Darstellung der Gleichung bereits besteht, weiß ich natürlich schon ob es eine Funktion ist oder nicht, da ich sie als ein solches
Funktions-Objekt darstellen würde.
Aber was genau wäre überhaupt ein Funktionsobjekt? Genau genommen ist es nämlich keine direkte Funktionsdefinition, sondern vielmehr ein Aufruf mit der Variable
oder den Variablen. Wohin führt mich das?

Dafür will ich mir ein Beispiel angucken:
f(x, y) = -(1/5)x^2 + 2y
a = 5
b = 2
f(a,b) =
f(a,b) = ... (konkreter Wert)

Und noch ein Beispiel:
f(x,y) = 2x - 3y
f(a,b) =
f(a,b) = 2a - 3b

Ich vermute, dass die Bedeutung der Ausdrücke also immer von dem mathematischen Kontext (definierte Variablen, definierte Funktionen) abhängen. In dem ersten Beispiel weiß ich,
dass die Funktion f bereits definiert ist und es sich bei dem Ausrück f(a,b) grundsätzlich um einen Aufruf und nicht um eine Definition handelt. Dann weiß ich anhand der beiden
Parameter, a und b, dass es sich um eine komplette Berechnung handeln muss, da alle unbekannten bereits einen Wert zugewiesen bekommen haben. Und ich denke, dass man in solchen
mathematischen Kontexten den Wert von einer Variable innerhalb eines Kontextes auch nicht ändert. Wenn es in einem Problem eine Variable gibt, und diese einen Wert bekommt, so 
bleibt dieser für das Problem bestehen. Sobald sich die Voraussetzungen (d.h. u.a. die Werte der Variablen) ändern, handelt es sich um ein neues Problem, und somit um einen
neuen mathematischen Kontext.
Was also ist ein mathematischer Kontext? Ein mathematischer Kontext enthält alle bereits definierten Variablen und Funktionen. Außerdem könnte man auch von einem Standard-Kontext
reden, der "vordefinierte" Funktionen wie die trigonometrischen (sin, cos etc.) oder mathematische Konstanten (z.B. Pi) enthält. Von diesem Standard-Kontext könnten dann neu
erstelle Kontexte erben, sofern sie nicht aus irgendeinem Grund Funktionsbeschreiber wie "sin" neu definieren wollen (was aufgrund der mehreren Buchstaben erst einmal gar nicht
möglich sein soll). Dieser mathematische Kontext ist dann das grundlegendste Objekt. Bevor man ein Gleichung oder einen Ausdruck erstellen kann, muss erst der mathematische Kontext
dafür gegeben sein.

Der mathematische Kontext verbindet sozusagen die verschiedenen Gleichungen. Wenn zum Beispiel in "Zeile" bzw. Gleichung 1 die Funktion f definiert wird, um sie dann in der
zweiten Gleichung abzuleiten, müssen f und f' auf die gleiche Funktion zeigen. Und diese Verbindung wird durch den mathematischen Kontext hergestellt.

--PROBLEM MATHEMATISCHER KONTEXT--
Die Grundlagen wurden jetzt soweit umgesetzt, allerdings muss zum richtigen implementieren von Funktionen jetzt der MathContext implementiert werden. Über den mathematischen Kontext
werden die Eingaben erst zugelassen, da er die Informationen hat, die zum richtigen Parsen benötigt werden. Somit brauch der MathContext eine Funktion zum Hinzufügen von Gleichungen,
beispielsweise zum Definieren von Funktionen.

f(x) = x^2+4
g(x) = 2*f(x) - 12

Soll es möglich sein, Funktionsdefinitionen andersherum zu schreiben (Beispiel: 14*y+3 = h(y))?
Es wäre gut, wenn das möglich ist, da es algebraisch und mathematisch nun mal möglich ist, es so zu notieren, auch wenn es unüblich ist. Aber mein CAS soll standfest und so generell
wie möglich sein. Deswegen will ich auch das ermöglichen.
==> x^2 = f(x) <-- JA

Was ist mit mehreren Gleichheitszeichen in einer "Gleichungszelle"?
Mir fallen im Moment keine Beispiele ein, wo es wirklich sinnvoll wäre, mehrere Gleichheitszeichen zu verwenden. Man kann zwar verkettete Gleichungen machen, also z.B.
f(x)	= 3x(x^2-2)
		= 3x*x^2+3x*(-2)
		= 3x^3 - 6x,
allerdings könnten die Ausdrücke in diesem Beispiel auch als mehrere Gleichungen angesehen werden. Andererseits könnte man eine Gleichung auch aus mehreren Ausdrücken bestehen
lassen. So wären bei der Gleichung oben 4 Ausdrücke in einem Gleichungsobjekt, was es leicht machen würde, festzustellen, ob einer dem anderen gleicht.

sobald irgendwo f(x) oder g(x) oder z(x) oder c(b) steht, wird beim Parsen angenommen, dass es eine Funktion ist. Es gibt keinen triftigen Grund, falls eine Multiplikation gemeint ist,
es so aufzuschreiben. Falls doch ist der Nutzer eben dazu gezwungen, es selbst entweder explizit zu schreiben oder einfach die Klammer aufzulösen (also "ab" statt "a(b)")

Sonntag, 7.7.2019:
Im Moment gibt es nur zwei Funktionen, die ich implementiert haben will, wenn ich die Punkte 10, 11 und 12 abgeschlossen habe:

1. Funktionen definieren:
f(x)=x^2
g(x)=sin(x)/13
b(z)=sin(z)*(1/10)+lg(z^2)

2. Funktionswerte ausrechnen:
f(3)= ... =9
b(π)= ...

3. Terme ausrechnen:
sin(3)+lg(12)/12-10= ...
